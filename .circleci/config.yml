version: 2.1

orbs:
  slack: circleci/slack@4.12.0
  aws-cli: circleci/aws-cli@3.1.4
  # ansible_upload: orbss/ansible_upload@0.2.8

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Testing Frontend
          command: |
            cd frontend
            npm install 
            npm run test
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend]
      # Your job code here
      - run:
          name: Testing Backend
          command: |
            cd backend
            npm install 
            npm run test
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Audit Analyse Frontend Vulnerabilities
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      # npm audit fix
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-backend]
      # Your job code here
      - run:
          name: Audit Analyse Backend Vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm update path-parse --depth 3
            npm audit --audit-level=critical
      # npm audix fix
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
      - slack/notify:
          branch_pattern: master
          channel: C04MYC3C1N2
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install tar utils
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_key
  #        fingerprints: [" "]
  #     # attach workspace
  #       - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #             yum install -y gcc libffi-devel python3 epel-release && \
  #             yum install -y python3-pip && \
  #             yum install -y wget && \
  #             yum clean all && \
  #             yum update -y && \
  #             yum install -y tar gzip curl unzip openssh-server openssh-clients && \
  #             python3 -m pip install ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #             cd .circleci/ansible
  #             ansible-playbook -i inventory.txt configure-server.yml
  #     - run:
  #         name: node_exporter
  #         command: |
  #           # Your code here
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt node-exporter.yml
  #     # Here's where you will add some code to rollback on failure      
  #     - remove-bucket-contents
  #     - destroy-environment 

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #      # - aws-cli/setup
  #    # - restore_cache:
  #    #     keys: [scan-backend]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #          cd backend
  #          # Run and save the migration output
  #          npm install --no-audit --no-fund
  #          npm run migrations > migrations_dump.txt
  #          # no_output_timeout: 5m
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
        # - checkout
        # - install awscli
        # - install nodejs
        # - restore_cache:
            #  keys: [frontend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
              # cd frontend
              # npm install
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
              # BACKEND_IP=$(aws ec2 describe-instances \
              # --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              # --query 'Reservations[*].Instances[*].PublicIpAddress' \
              # --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
              # echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
  #           echo "${API_URL}"
              # cat frontend/ .env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cleanup:
  #     docker:
  #       # Docker image here
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi
              

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          require: [build-frontend, build-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
