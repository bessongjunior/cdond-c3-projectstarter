version: 2.1

orbs:
  slack: circleci/slack@4.12.0
  aws-cli: circleci/aws-cli@3.1.4
  # ansible_upload: orbss/ansible_upload@0.2.8

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      #add parameters here
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS = 1  # comment this code line.
            SUCCESS=$(curl -k "https://kvdb.io/Ddru8uAtzykhKNxseBqGBP/migration_<< parameters.workflow_id >>")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

  # remove-bucket-contents:
  #   description: Remove contents of bucket
  #   parameters:
  #     bucket_name:
  #       type: string
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"
  #   steps:
  #     - run:
  #         name: Remove contents of bucket
  #         when: on_fail
  #         command: |
  #            # your code here
  #            aws s3 rm s3://udapeople-<< parameters.bucket_name >> --recursive
 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Testing Frontend
          command: |
            cd frontend
            npm install 
            npm run test
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend]
      # Your job code here
      - run:
          name: Testing Backend
          command: |
            cd backend
            npm install 
            npm run test
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Audit Analyse Frontend Vulnerabilities
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      # npm audit fix
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-backend]
      # Your job code here
      - run:
          name: Audit Analyse Backend Vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm update path-parse --depth 3
            npm audit --audit-level=critical
      # npm audix fix
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
      - slack/notify:
          branch_pattern: master
          channel: C04MYC3C1N2
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install tar utils
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #     # - image: amazon/aws-cli #- donot support tar
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: 
  #           - "53:d3:c5:8e:a4:88:96:07:1c:95:a6:62:76:8a:a8:f8"
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #           apk add --update --no-cache tar gzip ansible awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           # echo ENVIRONMENT=production > backend/.env
  #           # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
  #           # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
  #           # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
  #           # echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
  #           # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
  #           # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
  #           # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
  #           # echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
  #           # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
  #           # cat backend/.env
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml

  #     # - persist_to_workspace:
  #     #     root: ~/
  #     #     paths:
  #     #       - project/backend
  #     # Here's where you will add some code to rollback on failure      
  #     # - remove-bucket-contents
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
 
  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - '53:d3:c5:8e:a4:88:96:07:1c:95:a6:62:76:8a:a8:f8'
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip ansible aws-cli
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  # update this later
            # add environment variables to server
            # echo ENVIRONMENT=production > backend/.env
            # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            # echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            # echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            # cat backend/.env
            # cd .circleci/ansible
            # ansible-playbook -i inventory.txt configure-server.yml
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/backend
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            yum install -y gcc libffi-devel python3 epel-release && \
            yum install -y python3-pip && \
            yum install -y wget && \
            yum clean all && \
            yum update -y && \
            yum install -y tar gzip curl unzip openssh-server openssh-clients && \
            python3 -m pip install ansible
      # Add ssh keys with fingerprint
      - add_ssh_keys:
           fingerprints: ["53:d3:c5:8e:a4:88:96:07:1c:95:a6:62:76:8a:a8:f8"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: node_exporter
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt node-exporter.yml
      # - slack/notify:
      #     branch_pattern: master
      #     channel: C04CPS646NP
      #     event: fail
      #     template: basic_fail_1
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}



  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      # - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            # Run and save the migration output
            npm install
            npm run build
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to kvdb #memstash
          command: |
            # Your code here
            if grep -q "has executed success" ~/project/backend/migrations.txt
            then
              curl https://kvdb.io/Ddru8uAtzykhKNxseBqGBP/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
    # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update && \
            sudo apt install -y tar gzip curl nodejs npm aws-cli curl
            # apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/ .env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm i
            pwd
            npm run build
            # tar -czvf artifact="$(CIRCLE_WORKFLOW_ID:0:7)".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}  --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "53:d3:c5:8e:a4:88:96:07:1c:95:a6:62:76:8a:a8:f8"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - run:
          name: Package Backend
          command: |
            cd backend
            npm i
            npm run build
            # cd ..
            # tar -C backend -czf artifact.tar.gz .
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd .circleci/ansible
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $BACKEND_IP >> inventory.txt
            cat inventory.txt
            pwd
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     # Checkout code from git
        # - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
              # apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
        # - restore_cache:
        #   keys: [backend-build]
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
              # export BACKEND_IP=$(aws ec2 describe-instances \
              # --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              # --query "Reservations[*].Instances[*].PublicDnsName" \
              # --output text)
              # echo "${API_URL}"
              # export API_URL="http://${BACKEND_IP}:3030" 
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
              # if [[ 'ok' =~ $(curl -s --connect-timeout 5 http://${BACKEND_IP}:3030/api/status | grep -o ok) ]];then return 0 else return 1;fi
  #                # if curl "${API_URL}/api/status" | grep "ok"
   #               # then
    #              #     return 0
     #             # else
      #            #     return 1
       #           # fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
              # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              # echo ${URL} 
              # if curl -s ${URL} | grep "Welcome"
              # then
              #     # Change this to 0 after the job fails
              #   return 0
              # else
              #   return 1
              # fi
  #     # Here's where you will add some code to rollback on failure  
      # - revert-migrations
      # - remove-bucket-contents
      # - destroy-environment

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
        # - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
        # - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
              # sudo apt install -y tar curl gzip
              # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              # unzip -qq awscliv2.zip
              # sudo ./aws/install
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
              # export OldWorkflowID=$(aws cloudformation list-exports \
              # --query "Exports[?Name==\`WorkflowID\`].Value" \
              # --no-paginate --output text)
              # echo "${OldWorkflowID}" >> ~/OldWorkflowID.txt
              # echo "${OldWorkflowID}"
              # aws cloudformation deploy \
              # --template-file .circleci/files/cloudfront.yml \
              # --stack-name InitialStack \
              # --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              # --tags project=udapeople
  #     # Here's where you will add some code to rollback on failure  
        # - revert-migrations
        # - remove-bucket-contents
        # - destroy-environment

  # cleanup:
  #     docker:
  #       # Docker image here
          # - image: amazon/aws-cli
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID=$(aws cloudformation \
                # list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                #   --no-paginate --output text)
                # echo OldWorkflowID: "${OldWorkflowID}"
                # echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #             export STACKS=[$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                # --stack-status-filter CREATE_COMPLETE --no-paginate --output text)] #put the list of stacks here
                # STACKSID=($(aws cloudformation describe-stacks --query "Stacks[*].Outputs[?OutputKey==\`ID\`].OutputValue" --no-paginate --output text))
                # echo Stack ids: "${STACKSID[@]}"
                # echo Stack names: "${STACKS[@]}"
                # echo $OldWorkflowID ${CIRCLE_WORKFLOW_ID:0:7}
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi
                # for i in "${STACKSID[@]}"
                # do
                #   if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "$i" ]]
                #   then
                #       echo "----------------Delete confirmed-----------"
                #       aws s3 rm "s3://udapeople-$i" --recursive
                #       aws cloudformation delete-stack --stack-name "udapeople-frontend-$i"
                #       aws cloudformation delete-stack --stack-name "udapeople-backend-$i"
                #   else
                #       echo  "----------------Cannot cleanup------------"
                #   fi
                # done


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
